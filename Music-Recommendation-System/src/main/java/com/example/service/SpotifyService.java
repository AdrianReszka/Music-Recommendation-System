package com.example.service;

import com.example.model.SpotifyUser;
import com.example.repository.PlaylistRepository;
import com.example.repository.SpotifyUserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.beans.factory.annotation.Value;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
public class SpotifyService {

    @Value("${spotify.client-id}")
    private String clientId;

    @Value("${spotify.client-secret}")
    private String clientSecret;

    @Value("${spotify.redirect-uri}")
    private String redirectUri;

    private final RestTemplate restTemplate = new RestTemplate();

    private final SpotifyUserRepository spotifyUserRepository;

    public String buildLoginUrl() {
        return "https://accounts.spotify.com/authorize" +
                "?client_id=" + clientId +
                "&response_type=code" +
                "&redirect_uri=" + URLEncoder.encode(redirectUri, StandardCharsets.UTF_8) +
                "&scope=playlist-modify-public playlist-modify-private user-read-private";
    }

    public SpotifyUser exchangeCodeAndSaveUser(String code) {
        String tokenUrl = "https://accounts.spotify.com/api/token";

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        headers.setBasicAuth(clientId, clientSecret);

        MultiValueMap<String, String> form = new LinkedMultiValueMap<>();
        form.add("grant_type", "authorization_code");
        form.add("code", code);
        form.add("redirect_uri", redirectUri);

        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(form, headers);

        ResponseEntity<Map> tokenResponse = restTemplate.postForEntity(tokenUrl, request, Map.class);
        Map body = tokenResponse.getBody();

        if (body == null || !body.containsKey("access_token")) {
            throw new RuntimeException("No access token returned from Spotify");
        }

        String accessToken = (String) body.get("access_token");
        String refreshToken = (String) body.get("refresh_token");
        Integer expiresIn = (Integer) body.get("expires_in"); // seconds

        HttpHeaders authHeaders = new HttpHeaders();
        authHeaders.setBearerAuth(accessToken);
        HttpEntity<Void> userRequest = new HttpEntity<>(authHeaders);

        ResponseEntity<Map> userResponse = restTemplate.exchange("https://api.spotify.com/v1/me", HttpMethod.GET, userRequest, Map.class);
        Map userBody = userResponse.getBody();

        if (userBody == null || !userBody.containsKey("id")) {
            throw new RuntimeException("Spotify user info not found");
        }

        String spotifyId = (String) userBody.get("id");
        String displayName = (String) userBody.getOrDefault("display_name", spotifyId);

        SpotifyUser user = spotifyUserRepository.findBySpotifyId(spotifyId).orElse(new SpotifyUser());
        user.setSpotifyId(spotifyId);
        user.setDisplayName(displayName);
        user.setAccessToken(accessToken);
        user.setRefreshToken(refreshToken);
        user.setTokenExpiresAt(java.time.LocalDateTime.now().plusSeconds(expiresIn));

        return spotifyUserRepository.save(user);
    }

    public void createPlaylistWithTracks(String spotifyId, List<String> trackUris) {
        SpotifyUser user = spotifyUserRepository.findBySpotifyId(spotifyId)
                .orElseThrow(() -> new RuntimeException("Spotify user not found"));

        String accessToken = user.getAccessToken();

        String playlistName = "BeatBridge Recommendations Playlist";
        String createPlaylistUrl = "https://api.spotify.com/v1/users/" + spotifyId + "/playlists";

        Map<String, Object> playlistBody = new HashMap<>();
        playlistBody.put("name", playlistName);
        playlistBody.put("description", "Generated by BeatBridge");
        playlistBody.put("public", false);

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(accessToken);
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<Map<String, Object>> playlistRequest = new HttpEntity<>(playlistBody, headers);
        ResponseEntity<Map> playlistResponse = restTemplate.postForEntity(createPlaylistUrl, playlistRequest, Map.class);

        if (!playlistResponse.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Failed to create playlist");
        }

        String playlistId = (String) playlistResponse.getBody().get("id");

        String addTracksUrl = "https://api.spotify.com/v1/playlists/" + playlistId + "/tracks";

        Map<String, Object> tracksBody = Map.of("uris", trackUris);
        HttpEntity<Map<String, Object>> tracksRequest = new HttpEntity<>(tracksBody, headers);

        ResponseEntity<Void> addTracksResponse = restTemplate.postForEntity(addTracksUrl, tracksRequest, Void.class);

        if (!addTracksResponse.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Failed to add tracks to playlist");
        }
    }
}

